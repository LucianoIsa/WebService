package com.educacionit.implementacion.mysql;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.educacionit.entidades.Usuario;
import com.educacionit.interfaces.ConexionMySQL;
import com.educacionit.interfaces.DAO;
import com.educacionit.interfaces.UtilidadesFecha;

public class UsuarioImplementacion implements DAO<Usuario, String>, ConexionMySQL {

	private PreparedStatement psBuscar;
	private PreparedStatement psInsertar;
	private PreparedStatement psEliminar;
	private PreparedStatement psActualizar;
	private PreparedStatement psListar;

	// para desencriptar la clave , uso la siguiente KEY
	private final String KEY = "JavaWebAPI";

	@Override
	public Usuario buscar(String correo) {
		Usuario usuario = null;
		String query = "select cast(AES_DECRYPT(clave,?) as char(50)) as clave, fechaActualizacion, fechaCreacion from usuarios where correo =?";

		try {

			if (null == psBuscar) {
				// quiere decir que no se establecio la conexion con la base

				// Cada vez, que lo invoque , me genera una conexion
				psBuscar = getConexion().prepareStatement(query);
			}

			// remmpleazo al primer ? de la query, por la variable KEY
			psBuscar.setString(1, KEY);

			// reemplazo al segundo ? por la variable correo.
			psBuscar.setString(2, correo);

			ResultSet resultado = psBuscar.executeQuery();

			if (resultado.next()) {
				usuario = new Usuario();
				usuario.setCorreo(correo);
				usuario.setClave(resultado.getString("clave"));
				usuario.setFechaActualizacion(resultado.getDate("fechaActualizacion"));
				usuario.setFechaCreacion(UtilidadesFecha.getStringAFecha(resultado.getString("fechaCreacion")));

			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ParseException e) {

			e.printStackTrace();
		}

		return usuario;
	}

	@Override
	public Boolean insertar(Usuario e) {

		String query = "insert into usuarios(correo, clave, fechaCreacion)values(?, AES_ENCRYPT(?,?),?)";

		try {
			if (null == psInsertar) {
				psInsertar = getConexion().prepareStatement(query);
			}
			psInsertar.setString(1, usuario.getCorreo());
			psInsertar.setString(2, usuario.getClave());
			psInsertar.setString(3, KEY);
			psInsertar.setString(4, UtilidadesFecha.getFechaAString(new Date()));

			return psInsertar.executeUpdate() == 1;
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return false;
	}

	@Override
	public Boolean eliminar(Usuario usuarios) {
		String query = "delete from usuarios where correo=?";
		try {
			if (null == psEliminar) {

				psEliminar = getConexion().prepareStatement(query);
			}
			
			//Seteo el correo, osea, recibe el correo y borra todo el registro
			psEliminar.setString(1, usuario.getCorreo());
			return psEliminar.executeUpdate()==1; // si devuelve un 1 es que pudo eliminarlo, 
												 // entonces va a ser True.
			

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public Boolean actualizar(Usuario usuario) {
		//Actualizo la clave
		String query ="update from usuarios set clave=AES_ENCRYPT(?,?) where correo =?";
		try {
			if (null=psActualizar) {
				psActualizar = getConexion().prepareStatement(query);
			}
			psActualizar.setString(1, usuario.getClave());
			psActualizar.setString(2, KEY);
			psActualizar.setString(3, usuario.getCorreo());
			return psActualizar.executeUpdate() == 1;
			
		}catch(SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public List<Usuario> listar(Usuario e) {
		List<Usuario> listaUsuarios = new ArrayList<>();
		
		//listo todos los usuarios con la CLAVE DESENCRYPTADA
		String query = "select correo, cast(AES_DECRYPT(clave, ?) as char(50)) as clave, fechaActualizacion, fechaCreacion form usuarios ";
		
		try {
			if(null==psListar) {
				psListar = getConexion().prepareStatement(query);
			}
			
			psListar.setString(1, KEY);
			
			ResultSet resultado = psListar.executeQuery();
			
			while (resultado.next()) {
				Usuario usuario = new Usuario();
				usuario.setCorreo(resultado.getString("correo"));
				usuario.setClave(resultado.getString("clave"));
				usuario.setFechaCreacion(UtilidadesFecha.getStringAFecha(resultado.getString("fechaCreacion")));
				listaUsuarios.add(usuario);
			}
		}catch(SQLException e1 ) {
			e1.printStackTrace();
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		return listaUsuarios;
	}

}
